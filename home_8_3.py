# Создайте собственный класс-исключение, который должен проверять содержимое
# списка на наличие только чисел. Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и
# вносить его в список, только если введено число. Класс-исключение должен не позволить
# пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
class NotANumber(Exception):
    def __init__(self, text):
        self.text = text

    def __str__(self):
        return self.text

    def check_input(self):
        pass


class Check:
    def __init__(self, sym):
        self.symbol = sym

    @property
    def check_input(self):
        try:
            if not self.symbol.isdigit():
                raise NotANumber(f"'{self.symbol}' - это не число")
            return int(self.symbol)
        except NotANumber as e:
            print(e)


user_list = []
print("Для заполнения списка введите число, или 'stop' - для выхода: ")
while True:
    user_input = input('---> ')
    if user_input == "stop":
        break
    user_list.append(Check(user_input).check_input)

user_list = [elem for elem in user_list if elem is not None]
print(f'Полученный список:\n{user_list}')
